name: Android Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        npm install --legacy-peer-deps
        npx expo install --fix
    
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
    
    - name: Prebuild Android
      run: |
        npx expo prebuild --platform android --no-install
    
    - name: Setup Keystore and Signing
      run: |
        # 키스토어 파일 생성
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/auto-app-factory.keystore
        
        # gradle.properties에 서명 정보 추가
        echo "MYAPP_UPLOAD_STORE_FILE=auto-app-factory.keystore" >> android/gradle.properties
        echo "MYAPP_UPLOAD_KEY_ALIAS=auto-app-factory" >> android/gradle.properties
        echo "MYAPP_UPLOAD_STORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> android/gradle.properties
        echo "MYAPP_UPLOAD_KEY_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> android/gradle.properties
        
        # build.gradle에 서명 설정 직접 추가
        cd android/app
        
        # 서명 설정을 build.gradle 끝에 추가
        cat >> build.gradle << 'GRADLE_EOF'

android {
    signingConfigs {
        release {
            storeFile file('auto-app-factory.keystore')
            storePassword 'autoappfactory123'
            keyAlias 'auto-app-factory'
            keyPassword 'autoappfactory123'
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}
GRADLE_EOF
        
        echo "=== build.gradle 확인 ==="
        tail -20 build.gradle
        
    - name: Make Gradlew executable
      run: chmod +x ./android/gradlew
      
    - name: Build Signed AAB
      working-directory: ./android
      run: |
        ./gradlew clean
        ./gradlew bundleRelease --stacktrace
        
        echo "=== 빌드 결과 ==="
        ls -la app/build/outputs/bundle/release/
    
    - name: Verify AAB signing
      run: |
        echo "=== AAB 서명 검증 ==="
        cd android/app/build/outputs/bundle/release
        
        # AAB 내용 확인
        unzip -l app-release.aab | head -20
        
        # META-INF 확인 (서명 파일들)
        echo "=== 서명 파일 확인 ==="
        unzip -l app-release.aab | grep "META-INF" || echo "META-INF 파일 없음"
        
    - name: Upload AAB to Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: app-bundle
        path: android/app/build/outputs/bundle/release/app-release.aab
        retention-days: 7

    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

    - name: Create Release
      env:
        GH_TOKEN: ${{ secrets.GH_PAT }}
      run: |
        AAB_PATH="android/app/build/outputs/bundle/release/app-release.aab"
        
        gh release create "v${{ github.run_number }}" \
          --repo "${{ github.repository }}" \
          --title "Release ${{ github.run_number }} - ${{ steps.date.outputs.date }}" \
          --notes "릴리스 서명된 AAB 파일 - Google Play Console 업로드 가능" \
          "$AAB_PATH#app-release.aab"
        
        echo "✅ 릴리스 생성 완료!"
