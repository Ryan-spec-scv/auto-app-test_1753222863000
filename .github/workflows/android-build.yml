name: Android Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        npm install --legacy-peer-deps
        npx expo install --fix
    
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
    
    - name: Prebuild Android
      run: |
        npx expo prebuild --platform android --no-install
    
    - name: Setup Keystore
      run: |
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/auto-app-factory.keystore
        ls -la android/app/auto-app-factory.keystore
        
    - name: Configure Release Signing in build.gradle
      run: |
        cp android/app/build.gradle android/app/build.gradle.backup
        
        # Python 스크립트 생성
        cat > modify_gradle.py << 'PYEOF'
import re
with open('android/app/build.gradle', 'r') as f:
    content = f.read()
if 'signingConfigs {' in content:
    signing_config = '''
        release {
            storeFile file("auto-app-factory.keystore")
            storePassword "autoappfactory123"
            keyAlias "auto-app-factory"
            keyPassword "autoappfactory123"
        }'''
    content = content.replace('signingConfigs {', 'signingConfigs {' + signing_config)
else:
    android_pattern = r'(android\s*{)'
    replacement = r'\1\n    signingConfigs {\n        release {\n            storeFile file("auto-app-factory.keystore")\n            storePassword "autoappfactory123"\n            keyAlias "auto-app-factory"\n            keyPassword "autoappfactory123"\n        }\n    }'
    content = re.sub(android_pattern, replacement, content)
build_types_pattern = r'(buildTypes\s*{[^}]*release\s*{)'
if re.search(build_types_pattern, content):
    content = re.sub(r'(buildTypes\s*{[^}]*release\s*{)', r'\1\n            signingConfig signingConfigs.release', content)
with open('android/app/build.gradle', 'w') as f:
    f.write(content)
print("build.gradle modified successfully")
PYEOF
        
        cd android/app
        python ../../modify_gradle.py
        
        echo "=== Modified build.gradle ==="
        grep -A 10 "signingConfigs" build.gradle || true
        grep -A 10 "buildTypes" build.gradle || true
        
    - name: Make Gradlew executable
      run: chmod +x ./android/gradlew
      
    - name: Build Signed AAB
      working-directory: ./android
      run: |
        ./gradlew clean
        ./gradlew bundleRelease --stacktrace
        ls -la app/build/outputs/bundle/release/
    
    - name: Verify AAB signing
      run: |
        echo "=== Verifying AAB signature ==="
        cd android/app/build/outputs/bundle/release
        jarsigner -verify -verbose -certs app-release.aab || echo "Jarsigner verification result: $?"
        echo "=== AAB contents ==="
        unzip -l app-release.aab | head -20
        echo "=== Checking META-INF ==="
        unzip -l app-release.aab | grep "META-INF" || echo "No META-INF signatures found"
        
    - name: Upload AAB to Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: app-bundle
        path: android/app/build/outputs/bundle/release/app-release.aab
        retention-days: 7

    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

    - name: Create Release using GitHub CLI
      env:
        GH_TOKEN: ${{ secrets.GH_PAT }}
      run: |
        AAB_PATH="android/app/build/outputs/bundle/release/app-release.aab"
        gh release create "v${{ github.run_number }}" \
          --repo "${{ github.repository }}" \
          --title "Release ${{ github.run_number }} - ${{ steps.date.outputs.date }}" \
          --notes "자동 생성된 릴리스 - 릴리스 서명된 AAB 파일" \
          "$AAB_PATH#app-release.aab"
        echo "Release created successfully!"
