name: Android Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        npm install --legacy-peer-deps
        npx expo install --fix
    
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
    
    - name: Prebuild Android
      run: |
        npx expo prebuild --platform android --no-install
    
    - name: Setup Keystore and Gradle Properties
      run: |
        # 키스토어 파일 생성
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/auto-app-factory.keystore
        
        # gradle.properties에 서명 정보 추가
        echo "MYAPP_UPLOAD_STORE_FILE=auto-app-factory.keystore" >> android/gradle.properties
        echo "MYAPP_UPLOAD_KEY_ALIAS=auto-app-factory" >> android/gradle.properties
        echo "MYAPP_UPLOAD_STORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> android/gradle.properties
        echo "MYAPP_UPLOAD_KEY_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> android/gradle.properties
        
        # build.gradle 파일 수정하여 릴리스 서명 설정 추가
        cd android/app
        
        # signingConfigs 섹션 찾아서 release 설정 추가
        sed -i '/signingConfigs {/a\
        release {\
            if (project.hasProperty("MYAPP_UPLOAD_STORE_FILE")) {\
                storeFile file(MYAPP_UPLOAD_STORE_FILE)\
                storePassword MYAPP_UPLOAD_STORE_PASSWORD\
                keyAlias MYAPP_UPLOAD_KEY_ALIAS\
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD\
            }\
        }' build.gradle
        
        # buildTypes의 release에 signingConfig 추가
        sed -i '/buildTypes {/,/release {/s/release {/release {\
            signingConfig signingConfigs.release/' build.gradle
        
        # 수정된 build.gradle 확인
        echo "=== Modified build.gradle (signing configs) ==="
        grep -A 10 "signingConfigs" build.gradle || true
        echo "=== Modified build.gradle (build types) ==="
        grep -A 5 "buildTypes" build.gradle || true
        
    - name: Make Gradlew executable
      run: chmod +x ./android/gradlew
      
    - name: Build Signed AAB
      working-directory: ./android
      run: |
        ./gradlew bundleRelease --info
    
    - name: Verify AAB signing
      run: |
        echo "=== Verifying AAB signature ==="
        cd android/app/build/outputs/bundle/release
        unzip -l app-release.aab | grep -i "META-INF" || echo "No META-INF found (might be unsigned)"
        
    - name: Upload AAB to Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: app-bundle
        path: android/app/build/outputs/bundle/release/app-release.aab
        retention-days: 7

    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

    - name: Create Release using GitHub CLI
      env:
        GH_TOKEN: ${{ secrets.GH_PAT }}
      run: |
        # AAB 파일 경로
        AAB_PATH="android/app/build/outputs/bundle/release/app-release.aab"
        
        # 릴리스 생성
        gh release create "v${{ github.run_number }}" \
          --repo "${{ github.repository }}" \
          --title "Release ${{ github.run_number }} - ${{ steps.date.outputs.date }}" \
          --notes "자동 생성된 릴리스입니다.
- 릴리스 모드로 서명된 AAB 파일
- Google Play Console 업로드 가능
- 빌드 번호: ${{ github.run_number }}
- 생성 시간: ${{ steps.date.outputs.date }}" \
          "$AAB_PATH#app-release.aab"
        
        echo "✅ Release created successfully!"
